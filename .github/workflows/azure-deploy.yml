name: Deploy to Azure

on:
  push:
    branches:
      - main
  workflow_dispatch:

# These permissions are needed for OIDC authentication
permissions:
  id-token: write # This is required for OIDC
  contents: read  # This is required to checkout the code
  pull-requests: write # This is required for commenting on PRs

env:
  AZURE_RG_NAME: aim-possible-rg
  AZURE_LOCATION: westeurope
  AZURE_APP_PLAN: aim-possible-plan
  AZURE_FRONTEND_APP: aim-possible-frontend
  AZURE_BACKEND_APP: aim-possible-backend
  NODE_VERSION: '18'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          frontend/package-lock.json
          backend/package-lock.json

    - name: Azure login with OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        enable-AzPSSession: false # We don't need PowerShell
        audience: api://AzureADTokenExchange # This is the default audience for OIDC

    - name: Validate Azure access
      uses: azure/CLI@v1
      with:
        inlineScript: |
          # Verify we have the correct permissions
          az account show
          az group show --name ${{ env.AZURE_RG_NAME }} || echo "Resource group does not exist yet"
    
    - name: Create Azure resources
      uses: azure/CLI@v1
      with:
        inlineScript: |
          # Create resource group if it doesn't exist
          az group create --name ${{ env.AZURE_RG_NAME }} --location ${{ env.AZURE_LOCATION }}
          
          # Create App Service Plan
          az appservice plan create \
            --name ${{ env.AZURE_APP_PLAN }} \
            --resource-group ${{ env.AZURE_RG_NAME }} \
            --sku B1 \
            --is-linux || echo "App Service Plan already exists"

          # Create Backend Web App (Node.js)
          az webapp create \
            --name ${{ env.AZURE_BACKEND_APP }} \
            --resource-group ${{ env.AZURE_RG_NAME }} \
            --plan ${{ env.AZURE_APP_PLAN }} \
            --runtime "NODE|18-lts" || echo "Backend app already exists"

          # Create Frontend Web App (Static files)
          az webapp create \
            --name ${{ env.AZURE_FRONTEND_APP }} \
            --resource-group ${{ env.AZURE_RG_NAME }} \
            --plan ${{ env.AZURE_APP_PLAN }} \
            --runtime "NODE|18-lts" || echo "Frontend app already exists"

    - name: Configure Backend Web App
      uses: azure/CLI@v1
      with:
        inlineScript: |
          # Configure Backend App Settings and Environment Variables
          az webapp config appsettings set \
            --resource-group ${{ env.AZURE_RG_NAME }} \
            --name ${{ env.AZURE_BACKEND_APP }} \
            --settings \
              PORT=8080 \
              NODE_ENV=production \
              FRONTEND_URL=https://${{ env.AZURE_FRONTEND_APP }}.azurewebsites.net \
              WEBSITE_NODE_DEFAULT_VERSION=~18 \
              SCM_DO_BUILD_DURING_DEPLOYMENT=true \
              ENABLE_ORYX_BUILD=true

          # Configure startup file for backend
          az webapp config set \
            --name ${{ env.AZURE_BACKEND_APP }} \
            --resource-group ${{ env.AZURE_RG_NAME }} \
            --startup-file "node index.js" \
            --always-on true

          # Enable logging
          az webapp log config \
            --resource-group ${{ env.AZURE_RG_NAME }} \
            --name ${{ env.AZURE_BACKEND_APP }} \
            --web-server-logging filesystem \
            --application-logging filesystem

          # Configure CORS for Backend
          az webapp cors add \
            --resource-group ${{ env.AZURE_RG_NAME }} \
            --name ${{ env.AZURE_BACKEND_APP }} \
            --allowed-origins \
              https://${{ env.AZURE_FRONTEND_APP }}.azurewebsites.net \
              http://localhost:5173 \
              http://localhost:4173

    - name: Configure Frontend Web App
      uses: azure/CLI@v1
      with:
        inlineScript: |
          # Configure Frontend App Settings for serving static files
          az webapp config appsettings set \
            --resource-group ${{ env.AZURE_RG_NAME }} \
            --name ${{ env.AZURE_FRONTEND_APP }} \
            --settings \
              NODE_ENV=production \
              WEBSITE_NODE_DEFAULT_VERSION=~18 \
              SCM_DO_BUILD_DURING_DEPLOYMENT=true \
              ENABLE_ORYX_BUILD=true \
              PORT=8080

          # Configure startup file for frontend (use Node.js server)
          az webapp config set \
            --name ${{ env.AZURE_FRONTEND_APP }} \
            --resource-group ${{ env.AZURE_RG_NAME }} \
            --startup-file "node server.js" \
            --always-on true

          # Enable logging
          az webapp log config \
            --resource-group ${{ env.AZURE_RG_NAME }} \
            --name ${{ env.AZURE_FRONTEND_APP }} \
            --web-server-logging filesystem \
            --application-logging filesystem

    - name: Install and Build Frontend
      run: |
        cd frontend
        # Use npm install instead of npm ci to handle package-lock.json sync issues
        npm install
        npm run build
        # Install production dependencies in the dist folder for deployment
        cd dist
        npm install --omit=dev
      env:
        VITE_API_URL: https://${{ env.AZURE_BACKEND_APP }}.azurewebsites.net
    
    - name: Install Backend Dependencies
      run: |
        cd backend
        # Install dependencies, use install instead of ci for flexibility
        npm install --only=production
    
    - name: Deploy Frontend
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_FRONTEND_APP }}
        package: frontend/dist
    
    - name: Deploy Backend
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_BACKEND_APP }}
        package: backend

    - name: Verify Deployment
      uses: azure/CLI@v1
      with:
        inlineScript: |
          echo "Checking backend health..."
          backend_url="https://${{ env.AZURE_BACKEND_APP }}.azurewebsites.net"
          frontend_url="https://${{ env.AZURE_FRONTEND_APP }}.azurewebsites.net"
          
          # Wait a moment for deployment to complete
          sleep 30
          
          # Check backend health
          if curl -f "$backend_url/health"; then
            echo "‚úÖ Backend is healthy"
          else
            echo "‚ùå Backend health check failed"
            az webapp log download --resource-group ${{ env.AZURE_RG_NAME }} --name ${{ env.AZURE_BACKEND_APP }}
          fi
          
          echo ""
          echo "Checking frontend health..."
          
          # Check frontend health endpoint first
          if curl -f "$frontend_url/health"; then
            echo "‚úÖ Frontend health endpoint is working"
          else
            echo "‚ö†Ô∏è Frontend health endpoint failed, checking main page..."
          fi
          
          # Check frontend main page
          if curl -f "$frontend_url"; then
            echo "‚úÖ Frontend is accessible"
          else
            echo "‚ùå Frontend accessibility check failed"
            echo "üìã Downloading frontend logs for debugging..."
            az webapp log download --resource-group ${{ env.AZURE_RG_NAME }} --name ${{ env.AZURE_FRONTEND_APP }}
            
            echo "üìä Checking app status..."
            az webapp show --resource-group ${{ env.AZURE_RG_NAME }} --name ${{ env.AZURE_FRONTEND_APP }} --query "{state:state,hostNames:defaultHostName}" --output table
          fi
          
          echo ""
          echo "üîó Application URLs:"
          echo "Backend URL: $backend_url"
          echo "Backend Health: $backend_url/health"
          echo "Frontend URL: $frontend_url"
          echo "Frontend Health: $frontend_url/health"
